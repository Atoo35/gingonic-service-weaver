// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package repositories

import (
	"context"
	"errors"
	"github.com/Atoo35/gingonic-service-weaver/models"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

var _ codegen.LatestVersion = codegen.Version[[0][17]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.19.0 (codegen
version v0.17.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository",
		Iface: reflect.TypeOf((*TaskRepository)(nil)).Elem(),
		Impl:  reflect.TypeOf(taskRepository{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return taskRepository_local_stub{impl: impl.(TaskRepository), tracer: tracer, createTaskMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "CreateTask", Remote: false}), deleteTaskMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "DeleteTask", Remote: false}), getTaskByIDMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "GetTaskByID", Remote: false}), getTasksMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "GetTasks", Remote: false}), updateTaskMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "UpdateTask", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return taskRepository_client_stub{stub: stub, createTaskMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "CreateTask", Remote: true}), deleteTaskMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "DeleteTask", Remote: true}), getTaskByIDMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "GetTaskByID", Remote: true}), getTasksMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "GetTasks", Remote: true}), updateTaskMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/Atoo35/gingonic-service-weaver/repositories/TaskRepository", Method: "UpdateTask", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return taskRepository_server_stub{impl: impl.(TaskRepository), addLoad: addLoad}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[TaskRepository] = (*taskRepository)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*taskRepository)(nil)

// Local stub implementations.

type taskRepository_local_stub struct {
	impl               TaskRepository
	tracer             trace.Tracer
	createTaskMetrics  *codegen.MethodMetrics
	deleteTaskMetrics  *codegen.MethodMetrics
	getTaskByIDMetrics *codegen.MethodMetrics
	getTasksMetrics    *codegen.MethodMetrics
	updateTaskMetrics  *codegen.MethodMetrics
}

// Check that taskRepository_local_stub implements the TaskRepository interface.
var _ TaskRepository = (*taskRepository_local_stub)(nil)

func (s taskRepository_local_stub) CreateTask(ctx context.Context, a0 models.Task) (err error) {
	// Update metrics.
	begin := s.createTaskMetrics.Begin()
	defer func() { s.createTaskMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "repositories.TaskRepository.CreateTask", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.CreateTask(ctx, a0)
}

func (s taskRepository_local_stub) DeleteTask(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	begin := s.deleteTaskMetrics.Begin()
	defer func() { s.deleteTaskMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "repositories.TaskRepository.DeleteTask", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.DeleteTask(ctx, a0)
}

func (s taskRepository_local_stub) GetTaskByID(ctx context.Context, a0 string) (r0 models.Task, err error) {
	// Update metrics.
	begin := s.getTaskByIDMetrics.Begin()
	defer func() { s.getTaskByIDMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "repositories.TaskRepository.GetTaskByID", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetTaskByID(ctx, a0)
}

func (s taskRepository_local_stub) GetTasks(ctx context.Context) (r0 []models.Task, err error) {
	// Update metrics.
	begin := s.getTasksMetrics.Begin()
	defer func() { s.getTasksMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "repositories.TaskRepository.GetTasks", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetTasks(ctx)
}

func (s taskRepository_local_stub) UpdateTask(ctx context.Context, a0 string, a1 models.Task) (r0 models.Task, err error) {
	// Update metrics.
	begin := s.updateTaskMetrics.Begin()
	defer func() { s.updateTaskMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "repositories.TaskRepository.UpdateTask", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UpdateTask(ctx, a0, a1)
}

// Client stub implementations.

type taskRepository_client_stub struct {
	stub               codegen.Stub
	createTaskMetrics  *codegen.MethodMetrics
	deleteTaskMetrics  *codegen.MethodMetrics
	getTaskByIDMetrics *codegen.MethodMetrics
	getTasksMetrics    *codegen.MethodMetrics
	updateTaskMetrics  *codegen.MethodMetrics
}

// Check that taskRepository_client_stub implements the TaskRepository interface.
var _ TaskRepository = (*taskRepository_client_stub)(nil)

func (s taskRepository_client_stub) CreateTask(ctx context.Context, a0 models.Task) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.createTaskMetrics.Begin()
	defer func() { s.createTaskMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "repositories.TaskRepository.CreateTask", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s taskRepository_client_stub) DeleteTask(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.deleteTaskMetrics.Begin()
	defer func() { s.deleteTaskMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "repositories.TaskRepository.DeleteTask", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s taskRepository_client_stub) GetTaskByID(ctx context.Context, a0 string) (r0 models.Task, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getTaskByIDMetrics.Begin()
	defer func() { s.getTaskByIDMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "repositories.TaskRepository.GetTaskByID", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

func (s taskRepository_client_stub) GetTasks(ctx context.Context) (r0 []models.Task, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getTasksMetrics.Begin()
	defer func() { s.getTasksMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "repositories.TaskRepository.GetTasks", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 3, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_Task_0d9ce9d2(dec)
	err = dec.Error()
	return
}

func (s taskRepository_client_stub) UpdateTask(ctx context.Context, a0 string, a1 models.Task) (r0 models.Task, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateTaskMetrics.Begin()
	defer func() { s.updateTaskMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "repositories.TaskRepository.UpdateTask", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.String(a0)
	(a1).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

// Server stub implementations.

type taskRepository_server_stub struct {
	impl    TaskRepository
	addLoad func(key uint64, load float64)
}

// Check that taskRepository_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*taskRepository_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s taskRepository_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "CreateTask":
		return s.createTask
	case "DeleteTask":
		return s.deleteTask
	case "GetTaskByID":
		return s.getTaskByID
	case "GetTasks":
		return s.getTasks
	case "UpdateTask":
		return s.updateTask
	default:
		return nil
	}
}

func (s taskRepository_server_stub) createTask(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 models.Task
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.CreateTask(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s taskRepository_server_stub) deleteTask(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.DeleteTask(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s taskRepository_server_stub) getTaskByID(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetTaskByID(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s taskRepository_server_stub) getTasks(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetTasks(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Task_0d9ce9d2(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s taskRepository_server_stub) updateTask(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 models.Task
	(&a1).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.UpdateTask(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_Task_0d9ce9d2(enc *codegen.Encoder, arg []models.Task) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Task_0d9ce9d2(dec *codegen.Decoder) []models.Task {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]models.Task, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}
